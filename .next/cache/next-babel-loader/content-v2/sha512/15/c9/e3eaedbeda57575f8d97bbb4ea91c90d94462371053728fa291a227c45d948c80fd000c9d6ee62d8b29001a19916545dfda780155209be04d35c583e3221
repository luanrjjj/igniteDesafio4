{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/luan/Documentos/IgniteDesafio4/src/pages/post/[slug].tsx\";\nimport { getPrismicClient } from '../../services/prismic';\nimport { RichText } from 'prismic-dom';\nexport default function Post({\n  post\n}) {\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"header\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient(); //const posts = await prismic.query();\n\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  console.log(500, slug);\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  console.log(5000, response);\n  const post = {\n    slug,\n    title: RichText.asText(response.data.title),\n    content: RichText.asHtml(response.data.content),\n    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    })\n  };\n  return {\n    props: {\n      post\n    },\n    redirect: 60 * 30\n  };\n};","map":{"version":3,"sources":["/home/luan/Documentos/IgniteDesafio4/src/pages/post/[slug].tsx"],"names":["getPrismicClient","RichText","Post","post","getStaticPaths","prismic","paths","fallback","getStaticProps","params","slug","console","log","response","getByUID","String","title","asText","data","content","asHtml","updatedAt","Date","last_publication_date","toLocaleDateString","day","month","year","props","redirect"],"mappings":";;;AAEA,SAASA,gBAAT,QAAiC,wBAAjC;AACA,SAASC,QAAT,QAAyB,aAAzB;AA2BA,eAAe,SAASC,IAAT,CAAc;AAACC,EAAAA;AAAD,CAAd,EAAgC;AAG7C,sBACE;AAAA,2BACA;AAAA;AAAA;AAAA;AAAA;AADA,mBADF;AASD;AAED,OAAO,MAAMC,cAAc,GAAG,YAAY;AACxC,QAAMC,OAAO,GAAGL,gBAAgB,EAAhC,CADwC,CAExC;;AAEA,SAAO;AACLM,IAAAA,KAAK,EAAE,EADF;AAELC,IAAAA,QAAQ,EAAC;AAFJ,GAAP;AAIA,CARK;AAWP,OAAO,MAAMC,cAAc,GAAG,OAAO;AAACC,EAAAA;AAAD,CAAP,KAAoB;AAEhD,QAAM;AAACC,IAAAA;AAAD,MAASD,MAAf;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ,EAAgBF,IAAhB;AACA,QAAML,OAAO,GAAGL,gBAAgB,EAAhC;AACA,QAAMa,QAAQ,GAAG,MAAMR,OAAO,CAACS,QAAR,CAAiB,MAAjB,EAAwBC,MAAM,CAACL,IAAD,CAA9B,EAAqC,EAArC,CAAvB;AAEFC,EAAAA,OAAO,CAACC,GAAR,CAAY,IAAZ,EAAiBC,QAAjB;AAGE,QAAMV,IAAI,GAAG;AACXO,IAAAA,IADW;AAEXM,IAAAA,KAAK,EAACf,QAAQ,CAACgB,MAAT,CAAgBJ,QAAQ,CAACK,IAAT,CAAcF,KAA9B,CAFK;AAGXG,IAAAA,OAAO,EAAClB,QAAQ,CAACmB,MAAT,CAAgBP,QAAQ,CAACK,IAAT,CAAcC,OAA9B,CAHG;AAIXE,IAAAA,SAAS,EAAE,IAAIC,IAAJ,CAAST,QAAQ,CAACU,qBAAlB,EAAyCC,kBAAzC,CAA4D,OAA5D,EAAoE;AAC/EC,MAAAA,GAAG,EAAC,SAD2E;AAE/EC,MAAAA,KAAK,EAAC,MAFyE;AAG/EC,MAAAA,IAAI,EAAE;AAHyE,KAApE;AAJA,GAAb;AAWA,SAAO;AACLC,IAAAA,KAAK,EAAE;AACLzB,MAAAA;AADK,KADF;AAIL0B,IAAAA,QAAQ,EAAC,KAAG;AAJP,GAAP;AAMA,CA3BK","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\n\nimport { getPrismicClient } from '../../services/prismic';\nimport { RichText } from 'prismic-dom';\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\nimport Header from '../../components/Header'\n\n\ninterface Post {\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    banner: {\n      url: string;\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n}\n\nexport default function Post({post}:PostProps) {\n\n\n  return (\n    <>\n    <header>\n\n    </header>\n   \n   </>\n  )\n  \n}\n\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  //const posts = await prismic.query();\n\n  return {\n    paths: [],\n    fallback:'blocking'\n  }\n };\n\n\nexport const getStaticProps = async ({params}) => {\n  \n  const {slug} = params\n  console.log(500,slug)\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post',String(slug),{});\n\nconsole.log(5000,response)\n\n\n  const post = {\n    slug,\n    title:RichText.asText(response.data.title),\n    content:RichText.asHtml(response.data.content),\n    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR',{\n    day:'2-digit',\n    month:'long',\n    year: 'numeric',\n    })\n  }\n\n  return {\n    props: {\n      post\n    },\n    redirect:60*30,\n  }\n };\n"]},"metadata":{},"sourceType":"module"}