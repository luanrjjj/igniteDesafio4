{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/home/luan/Documentos/IgniteDesafio4/src/pages/post/[slug].tsx\";\nimport { getPrismicClient } from '../../services/prismic';\nimport styles from './post.module.scss';\nimport Header from '../../components/Header';\nexport default function Post({\n  post\n}) {\n  console.log(1000000000, JSON.stringify(post.data.content));\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 5\n    }, this), /*#__PURE__*/_jsxDEV(\"main\", {\n      className: styles.container,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        className: styles.banner,\n        src: post.data.banner.url,\n        alt: \"banner\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 3\n      }, this), /*#__PURE__*/_jsxDEV(\"article\", {\n        className: styles.post,\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: post.data.title\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 40,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: styles.banner,\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: styles.postContent\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 42,\n            columnNumber: 7\n          }, this), post.data.content.map(item => {\n            /*#__PURE__*/\n            _jsxDEV(\"p\", {\n              children: [\"`\", item.heading, \"`\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 46,\n              columnNumber: 11\n            }, this);\n          })]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 7\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 3\n    }, this)]\n  }, void 0, true);\n}\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient(); //const posts = await prismic.query();\n\n  return {\n    paths: [],\n    fallback: 'blocking'\n  };\n};\nexport const getStaticProps = async ({\n  params\n}) => {\n  const {\n    slug\n  } = params;\n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post', String(slug), {});\n  const post = {\n    data: {\n      title: response.data.title,\n      banner: response.data.banner,\n      content: response.data.content.map(item => {\n        return {\n          heading: item.heading,\n          body: item.body\n        };\n      }) //content:RichText.asHtml(response.data.content)\n\n    },\n    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR', {\n      day: '2-digit',\n      month: 'long',\n      year: 'numeric'\n    })\n  };\n  return {\n    props: {\n      post\n    },\n    redirect: 60 * 30\n  };\n};","map":{"version":3,"sources":["/home/luan/Documentos/IgniteDesafio4/src/pages/post/[slug].tsx"],"names":["getPrismicClient","styles","Header","Post","post","console","log","JSON","stringify","data","content","container","banner","url","title","postContent","map","item","heading","getStaticPaths","prismic","paths","fallback","getStaticProps","params","slug","response","getByUID","String","body","updatedAt","Date","last_publication_date","toLocaleDateString","day","month","year","props","redirect"],"mappings":"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","sourcesContent":["import { GetStaticPaths, GetStaticProps } from 'next';\n\nimport { getPrismicClient } from '../../services/prismic';\nimport { RichText } from 'prismic-dom';\nimport commonStyles from '../../styles/common.module.scss';\nimport styles from './post.module.scss';\nimport Header from '../../components/Header'\nimport head from 'next/head'\ninterface Post {\n  first_publication_date: string | null;\n  data: {\n    title: string;\n    banner: {\n      url: string;\n    };\n    author: string;\n    content: {\n      heading: string;\n      body: {\n        text: string;\n      }[];\n    }[];\n  };\n}\n\ninterface PostProps {\n  post: Post;\n}\n\nexport default function Post({post}:PostProps) {\n  console.log(1000000000,JSON.stringify(post.data.content))\n  return (\n    <>\n    <Header/>\n  \n  <main className = {styles.container}>\n  <img className= {styles.banner} src = {post.data.banner.url} alt = \"banner\"/>\n  \n    <article className = {styles.post}>\n      <h1>{post.data.title}</h1>\n      <div className = {styles.banner}>\n      <div className =  {styles.postContent}>\n       \n      </div>\n        {post.data.content.map(item => {\n          <p>\n          `{item.heading}`\n          </p>\n        })}\n    </div>\n      \n    </article>\n  </main>\n\n   \n   </>\n  )\n  \n}\n\nexport const getStaticPaths = async () => {\n  const prismic = getPrismicClient();\n  //const posts = await prismic.query();\n\n  return {\n    paths: [],\n    fallback:'blocking'\n  }\n };\n\n\nexport const getStaticProps = async ({params}) => {\n  \n  const {slug} = params\n \n  const prismic = getPrismicClient();\n  const response = await prismic.getByUID('post',String(slug),{});\n\n\n\n\n  const post = {\n    \n    data: { \n    title:response.data.title,\n    banner:response.data.banner,\n      content:response.data.content.map (item => {\n        return {\n          heading:item.heading,\n          body:item.body\n        }\n      })\n    \n    //content:RichText.asHtml(response.data.content)\n  },\n    updatedAt: new Date(response.last_publication_date).toLocaleDateString('pt-BR',{\n    day:'2-digit',\n    month:'long',\n    year: 'numeric',\n    })\n  }\n\n\n \n  return {\n    props: {\n      post\n    },\n    redirect:60*30,\n  }\n };\n"]},"metadata":{},"sourceType":"module"}